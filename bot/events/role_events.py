"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ä–æ–ª–µ–π"""

import discord
from .base_event_handler import BaseEventHandler
from bot.analytics.analytics_manager import analytics_manager


class RoleEventHandler(BaseEventHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ä–æ–ª–µ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    """
    
    async def on_guild_role_create(self, role: discord.Role):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏"""
        if not self.is_feature_enabled('role_events'):
            return
            
        log_channel = self.get_log_channel(role.guild, 'role_events')
        moderator = await self.get_moderator_from_audit_log(role.guild, discord.AuditLogAction.role_create)
        
        embed = self.create_embed(
            title="üé® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å!",
            description=f"**–†–æ–ª—å:** {role.mention}\n"
                       f"**–¶–≤–µ—Ç:** {str(role.color)}\n"
                       f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {moderator}",
            color=discord.Color.green()
        )
        await log_channel.send(embed=embed)
        analytics_manager.data['roles']['created'] += 1
        analytics_manager.save()
    
    async def on_guild_role_delete(self, role: discord.Role):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
        if not self.is_feature_enabled('role_events'):
            return
            
        log_channel = self.get_log_channel(role.guild, 'role_events')
        moderator = await self.get_moderator_from_audit_log(role.guild, discord.AuditLogAction.role_delete)
        
        embed = self.create_embed(
            title="üóëÔ∏è –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞!",
            description=f"**–†–æ–ª—å:** @{role.name}\n"
                       f"**–¶–≤–µ—Ç:** {str(role.color)}\n"
                       f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {moderator}",
            color=discord.Color.red()
        )
        await log_channel.send(embed=embed)
        analytics_manager.data['roles']['deleted'] += 1
        analytics_manager.save()

    async def on_member_update(self, before, after):
        added_roles = set(after.roles) - set(before.roles)
        removed_roles = set(before.roles) - set(after.roles)
        for role in added_roles:
            role_id = str(role.id)
            analytics_manager.data['roles']['added'][role_id] = analytics_manager.data['roles']['added'].get(role_id, 0) + 1
        for role in removed_roles:
            role_id = str(role.id)
            analytics_manager.data['roles']['removed'][role_id] = analytics_manager.data['roles']['removed'].get(role_id, 0) + 1
        analytics_manager.save() 