"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""

import discord
from datetime import datetime, timedelta
from .base_event_handler import BaseEventHandler
from bot.analytics.analytics_manager import analytics_manager


class MemberEventHandler(BaseEventHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    """
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    
    async def on_member_update(self, before: discord.Member, after: discord.Member):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        # –¢–∞–π–º-–∞—É—Ç—ã (–º—å—é—Ç—ã)
        if before.timed_out_until != after.timed_out_until:
            if after.timed_out_until:
                analytics_manager.data['mutes']['timeout'] += 1
            else:
                analytics_manager.data['mutes']['untimeout'] += 1
            analytics_manager.save()
        await self._handle_timeout_events(before, after)
        await self._handle_role_events(before, after)
    
    async def _handle_timeout_events(self, before: discord.Member, after: discord.Member):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—É—Ç–æ–≤"""
        if not self.is_feature_enabled('timeout_events'):
            return
            
        log_channel = self.get_log_channel(after.guild, 'timeout_events')
        
        if not before.is_timed_out() and after.is_timed_out():
            timeout_duration = after.timed_out_until - datetime.utcnow()
            timeout_duration = timeout_duration - timedelta(microseconds=timeout_duration.microseconds)
            moderator = await self.get_moderator_from_audit_log(after.guild, discord.AuditLogAction.member_update)
            
            embed = self.create_embed(
                title="üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –º—É—Ç!",
                description=f"{after.mention} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ {timeout_duration}.\n**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {moderator}",
                color=discord.Color.orange()
            )
            await log_channel.send(embed=embed)
        
        elif before.is_timed_out() and not after.is_timed_out():
            embed = self.create_embed(
                title="üîä –ú—É—Ç —Å–Ω—è—Ç!",
                description=f"{after.mention} –±–æ–ª—å—à–µ –Ω–µ –∑–∞–º—É—á–µ–Ω.",
                color=discord.Color.green()
            )
            await log_channel.send(embed=embed)
    
    async def _handle_role_events(self, before: discord.Member, after: discord.Member):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ä–æ–ª–µ–π"""
        if not self.is_feature_enabled('role_management'):
            return
            
        log_channel = self.get_log_channel(after.guild, 'role_management')
        
        if len(before.roles) < len(after.roles):
            new_role = next(role for role in after.roles if role not in before.roles)
            moderator = await self.get_moderator_from_audit_log(after.guild, discord.AuditLogAction.member_role_update)
            
            embed = self.create_embed(
                title="üéñÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å!",
                description=f"{after.mention} –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å {new_role.mention}.\n**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {moderator}",
                color=discord.Color.blue()
            )
            await log_channel.send(embed=embed)
        
        elif len(before.roles) > len(after.roles):
            removed_role = next(role for role in before.roles if role not in after.roles)
            moderator = await self.get_moderator_from_audit_log(after.guild, discord.AuditLogAction.member_role_update)
            
            embed = self.create_embed(
                title="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–ª —Ä–æ–ª—å!",
                description=f"{after.mention} –ø–æ—Ç–µ—Ä—è–ª —Ä–æ–ª—å {removed_role.mention}.\n**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {moderator}",
                color=discord.Color.red()
            )
            await log_channel.send(embed=embed)
    
    async def on_member_ban(self, guild: discord.Guild, user: discord.User):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if not self.is_feature_enabled('ban_events'):
            return
            
        log_channel = self.get_log_channel(guild, 'ban_events')
        moderator = await self.get_moderator_from_audit_log(guild, discord.AuditLogAction.ban)
        
        embed = self.create_embed(
            title="üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!",
            description=f"{user.mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.\n**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {moderator}",
            color=discord.Color.red()
        )
        await log_channel.send(embed=embed)
        analytics_manager.data['bans']['banned'] += 1
        analytics_manager.save()
    
    async def on_member_unban(self, guild: discord.Guild, user: discord.User):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if not self.is_feature_enabled('ban_events'):
            return
            
        log_channel = self.get_log_channel(guild, 'ban_events')
        moderator = await self.get_moderator_from_audit_log(guild, discord.AuditLogAction.unban)
        
        embed = self.create_embed(
            title="üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω!",
            description=f"{user.mention} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.\n**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {moderator}",
            color=discord.Color.green()
        )
        await log_channel.send(embed=embed)
        analytics_manager.data['bans']['unbanned'] += 1
        analytics_manager.save() 

    async def on_member_join(self, member):
        analytics_manager.data['users']['joined'] += 1
        analytics_manager.save()

    async def on_member_remove(self, member):
        analytics_manager.data['users']['left'] += 1
        analytics_manager.save() 