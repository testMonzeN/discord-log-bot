"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Discord Log Bot
"""

import discord
from datetime import datetime
from typing import Optional
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..config import ConfigManager


def add_timestamp(embed: discord.Embed) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ embed —Å–æ–æ–±—â–µ–Ω–∏—é"""
    embed.set_footer(text=f"–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}")


def get_log_channel(guild: discord.Guild, feature: str, config_manager: "ConfigManager") -> discord.TextChannel:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        guild: Discord —Å–µ—Ä–≤–µ—Ä
        feature: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (invite_events, voice_activity, etc.)
        config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
    Returns:
        TextChannel: –ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –∏–ª–∏ –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    log_channels = config_manager.get_guild_log_channels(guild.id)
    
    if feature in log_channels:
        channel_id = log_channels[feature]
        channel = guild.get_channel(channel_id)
        if channel:
            return channel
    
    default_channel = guild.system_channel or guild.text_channels[0]
    return default_channel


def get_moderator_from_audit_log(guild: discord.Guild, action: discord.AuditLogAction, 
                                target_id: Optional[int] = None) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
    
    Args:
        guild: Discord —Å–µ—Ä–≤–µ—Ä
        action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –≤ audit log
        target_id: ID —Ü–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        str: –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    """
    try:
        async def get_moderator():
            async for entry in guild.audit_logs(action=action, limit=1):
                if target_id is None or entry.target.id == target_id:
                    return entry.user.mention
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        
        return get_moderator()
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"


def format_role_list(roles: list, exclude_everyone: bool = True) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        exclude_everyone: –ò—Å–∫–ª—é—á–∏—Ç—å —Ä–æ–ª—å @everyone
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
    """
    if exclude_everyone:
        roles = [role for role in roles if role.name != "@everyone"]
    
    if not roles:
        return "–ù–µ—Ç —Ä–æ–ª–µ–π"
    
    role_mentions = [role.mention for role in roles]
    return ", ".join(role_mentions)


def get_feature_emoji(feature: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        feature: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        str: –≠–º–æ–¥–∑–∏
    """
    emojis = {
        "invite_events": "üé´",
        "voice_activity": "üéß", 
        "message_events": "üí¨",
        "role_events": "üé®",
        "channel_events": "üìÅ",
        "ban_events": "üî®",
        "timeout_events": "üîá",
        "role_management": "üéñÔ∏è"
    }
    return emojis.get(feature, "üìù")


def get_feature_name(feature: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        feature: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        str: –ß–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    """
    names = {
        "invite_events": "–°–æ–±—ã—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π",
        "voice_activity": "–ì–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
        "message_events": "–°–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
        "role_events": "–°–æ–±—ã—Ç–∏—è —Ä–æ–ª–µ–π",
        "channel_events": "–°–æ–±—ã—Ç–∏—è –∫–∞–Ω–∞–ª–æ–≤",
        "ban_events": "–°–æ–±—ã—Ç–∏—è –±–∞–Ω–æ–≤",
        "timeout_events": "–°–æ–±—ã—Ç–∏—è –º—É—Ç–æ–≤",
        "role_management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏"
    }
    return names.get(feature, feature) 